image: maven:3.6.3-jdk-11

# DinD service is required for Testcontainers
services:
  - docker:dind

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  # Instruct Testcontainers to use the daemon of DinD.
  DOCKER_HOST: "tcp://docker:2375"
  # Improve performance with overlayfs.
  DOCKER_DRIVER: overlay2

stages:
  - build
  - test
  - release-start
  
cache:
  paths:
    - .m2/repository/
    - target/

build:
  stage: build
  script:
    - whoami
    - printenv    
    - mvn clean install -DskipTests=true
#  only:
#    - master

test:
  stage: test
  script:
    - mvn clean test
#  only:
#    - master

release-start:
  stage: release-start
  when: manual
  variables:
    ACTUAL_POPM_VER: "1.0.0-SNAPSHOT"
    RELEASE_VER: "1.0.0"
    NEXT_POM_VER: "1.1.0-SNAPSHOT"
  script:
    # we need to extract the ssh/git URL as the runner uses a tokenized URL
    # - export CI_PUSH_REPO=`echo $CI_REPOSITORY_URL | perl -pe 's#.*@(.+?(\:\d+)?)/#git@\1:#'`
    - export CI_PUSH_REPO=`echo $CI_REPOSITORY_URL | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - echo "repo ${CI_PUSH_REPO}"
    - export CI_PUSH_REPO=`echo "https://gitlab-ci-token:${CI_WRITE_TOKEN}@${CI_PUSH_REPO}"`
    - echo "repo ${CI_PUSH_REPO}"
    - echo "actual pom version ${ACTUAL_POPM_VER}"
    - echo "release version ${RELEASE_VER}"
    - echo "next pom version ${NEXT_POM_VER}"
#    # runner runs on a detached HEAD, create a temporary local branch for editing
#    - git config --global user.name "My Runner"
#    - git config --global user.email "runner@gitlab.example.org"
#    - git remote set-url --push origin "${CI_PUSH_REPO}"
#    - git checkout develop
#    - git checkout -b release/"${RELEASE_VER}" develop
#    - git checkout release/"${RELEASE_VER}"
#    # make your changes
#    - sed -i "s/${ACTUAL_POPM_VER}/${RELEASE_VER}/g" pom.xml
#    - cat pom.xml
#    # push changes
#    # always return true so that the build does not fail if there are no changes
#    - git commit -am "change pom version to ${RELEASE_VER}"
#    - git remote show
#    - git push origin release/"${RELEASE_VER}"
#    - git checkout master
#    - git merge --no-ff release/"${RELEASE_VER}"
#    - git push origin master 
#    - git tag -a "${RELEASE_VER}"
#    - git checkout develop
#    - git merge --no-ff master
#    - git branch -d release/1.2.0
#    - git push --all
#    - git push origin --tags

    

    
#deploy:
#  stage: deploy
#  script:
#    - mvn $MAVEN_CLI_OPTS deploy
#  only:
#    - master
